{"name":"Generator-angularjs-cordova","tagline":"A Yeoman generator for creating a Cordova-AngularJS application","body":"# AngularJS Cordova generator\r\n[![Build Status](https://travis-ci.org/keshavos/generator-angularjs-cordova.svg)](https://travis-ci.org/keshavos/generator-angularjs-cordova)\r\n\r\n\r\n[![NPM](https://nodei.co/npm/generator-angularjs-cordova.png?downloads=true)](https://nodei.co/npm/generator-angularjs-cordova/)\r\n\r\n\r\n## [Changelog](https://github.com/keshavos/generator-angularjs-cordova/blob/master/docs/CHANGELOG.md)\r\n\r\n## Installation & Getting started\r\n\r\n```\r\n$ npm install -g yo\r\n```\r\n```\r\nnpm install -g generator-angularjs-cordova\r\n```\r\n```\r\nmkdir testapp && cd testapp\r\nyo angularjs-cordova\r\n```\r\nThis presents you with a series of options to initialize and customize your application\r\n\r\nOnce this is done, run\r\n\r\n```grunt serve``` to run the app on your browser\r\n\r\n```grunt build``` which performs various build related tasks and copies it on to the `www/` folder where you can use the cordova commands to build/ deploy the app to emulator/ devices\r\n - concatenating all vendor files into a single file and all user code into a single file. This makes the distribution source cleaner.\r\n - Note: All user generated files are automatically injected into the index.html file, so the user doesn't have to manually include them\r\n - You can further customize the build tasks by suitably editing the Gruntfile\r\n\r\n## Overview\r\n\r\nA yeoman generator which combines the best features and practices for cordova based mobile app development  extended from the already available yeoman generators such as [angular generator](https://github.com/yeoman/generator-angular) [angular-cordova](https://github.com/wangshijun/generator-angular-cordova). The project scaffolds an AngularJs application as described and implemented with [MEAN stack](http://meanjs.org/docs.html#angularjs-modules).\r\n\r\n### Technologies:\r\n\r\n[Cordova](http://phonegap.com), [AngularJS](http://angularjs.org), [AngularUI](http://angular-ui.github.io/)\r\n\r\n### Features\r\n\r\n* Uses the [Vertical Module approach](http://meanjs.org/docs.html#angularjs-modules) for initializing and extending the angularjs application.\r\nThe project structure suggested by the Angular team with the [angular-seed](https://github.com/angular/angular-seed) works well but can get quite difficult to maintain and extend as the project grows. The vertical approach when used along the generator removes the hassle involved in manually including and injecting new services, defining routes and binding the views. It also allows for developers to work on individual modules which can then be combined seamlessly into the project.\r\n\r\n\r\n###Tests\r\n\r\nTo run the e2e protractor tests which come shipped with the sample app, run\r\n\r\n```\r\nwebdriver-manager update\r\nwebdriver-manager start         ###this should start the webdriver\r\ngrunt serve                     ###this will serve your app on http://127.0.0.1:9000/\r\nprotractor protractor-desktop-config.js   ###this will run the protractor tests\r\n```\r\n\r\n\r\n### Available sub-generators\r\n\r\nOnce setup, you can use any of the following sub-generators for extending your AngularJs application\r\n\r\n* [angularjs-cordova](#application-generator)\r\n* [angularjs-cordova:angular-config](#angularjs-config-sub-generator)\r\n* [angularjs-cordova:angular-controller](#angularjs-controller-sub-generator)\r\n* [angularjs-cordova:angular-directive](#angularjs-directive-sub-generator)\r\n* [angularjs-cordova:angular-filter](#angularjs-filter-sub-generator)\r\n* [angularjs-cordova:angular-module](#angularjs-module-sub-generator)\r\n* [angularjs-cordova:angular-route](#angularjs-route-sub-generator)\r\n* [angularjs-cordova:angular-service](#angularjs-service-sub-generator)\r\n* [angularjs-cordova:angular-test](#angularjs-test-sub-generator)\r\n* [angularjs-cordova:angular-view](#angularjs-view-sub-generator)\r\n\r\nThe generators does not provide sub-generators for the cordova side of the application. This is with the intention that the onus of using cordova commands should be on the developer as this can make for remembering the command list an overhead.\r\n\r\nAll the available cordova commands can be listed with `cordova help`\r\n\r\n## Application Generator\r\n\r\nThe application generator will help you create a fresh copy of a AngularJs application in your working Cordova folder(`app/`).\r\n\r\n\r\n```\r\n$ yo angularjs-cordova\r\n```\r\n\r\nThe generator will ask you a few questions about your new application and will generate it for you.\r\n\r\nNow, the application generator does a great job scaffolding a whole application, but daily work requires us to repeat a lot of structured code. For this purpose we provided you with some sub-generators to help you speed up your development.\r\n\r\n\r\n## AngularJS Module Sub-Generator\r\n\r\nAnother redundant task is creating a new AngularJS module structure. For this purpose you can use the Angular module sub-generator. It will create the proper folder structure for you and the module initialization file. Creating a new AngularJS module is simple:\r\n\r\n\r\n```\r\n$ yo angularjs-cordova:angular-module <module-name>\r\n```\r\n\r\nThe sub-generator will ask for more information about your folder structure, and will create the empty new AngularJS module. Now, to fill that new module with your business logic, we provided you with several AngularJS entities sub-generators.\r\n\r\n\r\n\r\n## AngularJS Route Sub-Generator\r\n\r\nTo construct your module you will often need to create a new route. The AngularJS route sub-generator will help you create a view, controller and a proper route in your module **routes.js** file. If it can't find the module routes file the sub-generator will create one for you. Creating a new AngularJS route will involve executing this command:\r\n\r\n\r\n\r\n```\r\n$ yo angularjs-cordova:angular-route <route-name>\r\n```\r\n\r\nThe sub-generator will ask for more information about your controller, view and routing URL, and will generate the appropriate files for you.\r\n\r\n\r\n\r\n## AngularJS Controller Sub-Generator\r\n\r\nThe AngularJS Controller sub-generator will create a new AngularJS controller in the specified module's **controllers** folder. To create a new AngularJS controller run *yo* again by using this command:\r\n\r\n\r\n```\r\n$ yo angularjs-cordova:angular-controller <controller-name>\r\n```\r\n\r\nThe sub-generator will ask you for the module name under which you would like to create your new controller, and will create a new AngularJS controller file in that module **controllers** folder and a test file in the **tests** folder.\r\n\r\n\r\n## AngularJS View Sub-Generator\r\n\r\nOnce you have your controller file ready, you may want to add a view that makes use of this controller. The AngularJS view sub-generator will create a new AngularJS view in thr specified module's **views** folder, and will allow you to add a route definition for it. To create a new AngularJS view you will need to execute this command:\r\n\r\n\r\n```\r\n$ yo angularjs-cordova:angular-view <view-name>\r\n```\r\n\r\nThe sub-generator will ask you for the module name under which you would like to create your new view, and some additional routing information. It will then create a new view file in that module's **views** folder and add a routing state to the module **routes.js** file. If it can't find the module routes file it will create one for you.\r\n\r\n\r\n\r\n## AngularJS Service Sub-Generator\r\n\r\nThe AngularJS service sub-generator will create a new AngularJS service in the specified module's **services** folder. To create a new AngularJS service you will need to execute this command:\r\n\r\n\r\n```\r\n$ yo angularjs-cordova:angular-service <service-name>\r\n```\r\n\r\nThe sub-generator will ask you for the module name and the type of service you would like to create. This will then create the chosen type of service under the selected module.\r\n\r\n\r\n\r\n## AngularJS Directive Sub-Generator\r\n\r\nThe AngularJS directive sub-generator will create a new AngularJS directive in the specified module's **directives** folder. Creating a new AngularJS directive should already look familiar:\r\n\r\n\r\n```\r\n$ yo angularjs-cordova:angular-directive <directive-name>\r\n```\r\n\r\nThe sub-generator will ask you for the module name under which you would like to create your new directive, and will create a new AngularJS directive file in that module's **directives** folder.\r\n\r\n\r\n\r\n## AngularJS Filter Sub-Generator\r\n\r\nThe AngularJS filter sub-generator will create a new AngularJS filter in a specified module's **filters** folder. To create a new AngularJS filter you need to call yo again:\r\n\r\n\r\n```\r\n$ yo angularjs-cordova:angular-filter <filter-name>\r\n```\r\n\r\nThe sub-generator will ask you for the module name under which you would like to create your new filter, and will create a new AngularJS filter file in that module **filters** folder.\r\n\r\n\r\n\r\n## AngularJS Config Sub-Generator\r\n\r\nThe AngularJS config sub-generator will create a new AngularJS config section in a specified module's **config** folder. To create a new AngularJS config file just call yo:\r\n\r\n\r\n```\r\n$ yo angularjs-cordova:angular-config <config-name>\r\n```\r\n\r\nThe sub-generator will ask you for the module name under which you would like to create your new config, and will create a new AngularJS config file in that module's **config** folder.\r\n\r\n\r\n\r\n## AngularJS Test Sub-Generator\r\n\r\nThe test generator generates unit and e2e test templates for you.\r\n\r\n\r\n```\r\n$ yo angularjs-cordova:angular-test <name>\r\n```\r\n\r\nThis will prompt the user with the option to either create a unit test template or an e2e test template for the chosen module and file type.\r\n\r\n\r\n## License\r\n\r\nMIT\r\n","google":"UA-51899607-1","note":"Don't delete this file! It's used internally to help with page regeneration."}